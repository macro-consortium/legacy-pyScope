#!/usr/bin/env python
"""Calibrate and manage incoming FITS images
"""

import logging
import os
import subprocess
import sys
import time
from datetime import datetime as dt
from pathlib import Path

from astropy.io import fits

# RA's in Sloan catalog at 30 deg Dec
sloan_ra = [22,23,0,1,2,8,9,10,11,12,13,14,15,16,17]

# Directory where raw images arrive
landing_dir = Path('/usr/local/telescope/user/images')

# long term storage
storage_root = Path('/mnt/imagesbucket')

# maximum age in seconds
maxage = 7 * 3600 * 24

# image prefixes and group names
groups = dict(m='macalester',
              a='augustana',
              c='coe',
              k='knox',
              i='iowa',
              x='external')

logging.basicConfig(
    filename="/usr/local/telescope/archive/logs/process-images.log",
    level=logging.INFO
    format="%(asctime)s:%(levelname)s:%(message)s"
    )

def timestamp():
    return str(dt.now())[:19]
    
def runcmd(cmd, **kwargs):
    """run a command and log output/errors if any to stdout
    add check=True to exit on errors
    """
    return subprocess.run(cmd, shell=True, encoding='ascii',
        stdout=subprocess.PIPE, **kwargs).stdout.strip()

def process_image(img):
    """process a single image
    """
    try:
        header = fits.getheader(img, 0)
    except OSError as e:
        logger.warning(f"Corrupt FITS file {str(img)}: {str(e)}")
        return

    if ('CALSTAT' not in header):
        distribute_image(img) # store a copy of the raw image

        logger.info(f'Started processing {img.name} at {timestamp()}')
        fits.setval(img, 'CALSTART', value=timestamp(),
            comment='Calibration start time [MST]', before='LST')
        fil = fits.getval(img, 'FILTER')
        isodate = fits.getval(img, 'DATE-OBS')[:10]

        # calibrate
        runcmd(f'cmos-calib -H 1 {img}')

        # wcs and fwhm
        if fil not in ('8', '9', 'S'): # don't do wcs, fwhm on grism or spectroscopy images
            # WCS solutions are obtained by running Pinpoint on TCC, otherwise use local wcs
            #runcmd(f'wcs -u 0.1 -o2w {str(img)} > /dev/null 2>&1')
            runcmd(f'fwhm -ow {str(img)}')

        # Calculate zero-point magnitudes for foc images that are have Sloan filters and are in Sloan catalog
        # NB overwrite switch on to override ZAG solution from Pinpoint
        if img.name[:3] == 'foc':
            ra = int(round(float(header['RA'][0:2])))
            if fil == 'G' and ra in sloan_ra:
                runcmd(f'calc-zmag -f g -ow {img}')
            if fil == 'R' and ra in sloan_ra:
                runcmd(f'calc-zmag -f r -ow {img}')
            if fil == 'I' and ra in sloan_ra:
                runcmd(f'calc-zmag -f i -ow {img}')
            runcmd(f"mv {str(landing_dir)}/*.sexout {str(landing_dir / 'sexout/')}")

        logger.info(f'...finished processing of {img.name} at {timestamp()}')

    distribute_image(img) # store copy of calibrated images
    
    if time.time() - img.stat().st_mtime > maxage:
        img.unlink()
        logger.info(f"Deleted {img}")

def distribute_image(img):
    """Copy raw or calibrated image to long-term storage
    """
    header = fits.getheader(img, 0)
    if 'CALSTAT' in header:
        yr_obs = header.get('DATE-OBS')[:4]
        obs_code = img.name[0:3]
        day_code = img.name[3:6]
        groupdir = groups.get(obs_code[0], 'other')
        target = storage_root / groupdir / obs_code / yr_obs / day_code / img.name
    else:
        isodate = header.get('DATE-OBS')[:10]
        target = storage_root / 'rawimage' / isodate / img.name

    # create the image directory and its parents if needed
    if not target.parent.exists():
        target.parent.mkdir(mode=0o775, parents=True)
        logger.info("Created directory", target.parent)

    # copy the image if target doesn't exist or is older
    x = runcmd(f'cp -u {str(img)} {str(target)}')
    if target.exists():
        logger.info(f"Copied {img.name} -> {target}")
    else:
        logger.warning(f"Failed to copy {img.name}: {x}")


os.umask(0o002)
current_day = dt.utcnow().timetuple().tm_yday

# Can specify day number or file(s) on command line
# in which case script exits when specified files are done
if len(sys.argv) > 1:
    if (runcmd('id -gn').strip() != 'talon'):
        print(f"Must be run as 'talon' user or group")
        sys.exit()
    if sys.argv[1].isdigit():
        day_nr = format(int(sys.argv[1]), '03d')
        file_list = landing_dir.glob(f"???{day_nr}*.fts")
        logger.info('Processing images for day %s at %s' % (day_nr, timestamp()))
    else:
        file_list = [Path(x) for x in sys.argv[1:]]
        logger.info('Processing %s at %s' % (' '.join(sys.argv[1:]), timestamp()))
    for img in file_list:
        process_image(img)

# with no arguments, run continuously
else:
    while True:
        for img in landing_dir.glob("*.fts"):
            process_image(img)
        time.sleep(5)
